// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview Generates a set of visualizations tailored to the dataset, along with AI-generated descriptions explaining the key insights revealed by each visualization.
 *
 * - generateVisualizations - A function that handles the visualization generation process.
 * - GenerateVisualizationsInput - The input type for the generateVisualizations function.
 * - GenerateVisualizationsOutput - The return type for the generateVisualizations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateVisualizationsInputSchema = z.object({
  datasetDescription: z
    .string()
    .describe('A detailed description of the dataset, including its columns and purpose.'),
  datasetSample: z
    .string()
    .describe('A sample of the dataset in CSV format.'),
});
export type GenerateVisualizationsInput = z.infer<typeof GenerateVisualizationsInputSchema>;

const VisualizationSuggestionSchema = z.object({
  visualizationType: z.string().describe('The type of the visualization (e.g., scatter plot, histogram, bar chart).'),
  description: z.string().describe('A textual description of the visualization and its key insights.'),
});

const VisualizationSchema = VisualizationSuggestionSchema.extend({
  imageDataUri: z.string().describe('The visualization as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.'),
});

const GenerateVisualizationsOutputSchema = z.array(VisualizationSchema);
export type GenerateVisualizationsOutput = z.infer<typeof GenerateVisualizationsOutputSchema>;

export async function generateVisualizations(input: GenerateVisualizationsInput): Promise<GenerateVisualizationsOutput> {
  return generateVisualizationsFlow(input);
}

const visualizationPrompt = ai.definePrompt({
  name: 'visualizationPrompt',
  input: {schema: GenerateVisualizationsInputSchema},
  output: {schema: z.array(VisualizationSuggestionSchema)},
  prompt: `You are an expert data analyst. You will suggest a set of visualizations tailored to the dataset, along with AI-generated descriptions explaining the key insights revealed by each visualization.

Dataset Description: {{{datasetDescription}}}
Dataset Sample: {{{datasetSample}}}

Suggest 2 to 4 visualizations that are informative and insightful. For each visualization, provide a concise description of the visualization type and the key insights it reveals. Do not generate the image data itself. Your output must be a JSON array of objects, where each object has a "visualizationType" and a "description".`,
});

const generateVisualizationsFlow = ai.defineFlow(
  {
    name: 'generateVisualizationsFlow',
    inputSchema: GenerateVisualizationsInputSchema,
    outputSchema: GenerateVisualizationsOutputSchema,
  },
  async input => {
    const {output} = await visualizationPrompt(input);
    if (!output) {
      return [];
    }

    const placeholderImageDataUri = 'https://placehold.co/400x300.png';

    const visualizationsWithImages = output.map((visSuggestion) => ({
      ...visSuggestion,
      imageDataUri: placeholderImageDataUri,
    }));
    
    return visualizationsWithImages;
  }
);
